server:
  port: 8080
spring:
  profiles:
    active: method_route

---
spring:
  cloud:
    gateway:
      routes:
      - id: after_route
        uri: http://192.168.12.33:8083
        predicates:
        - After=2019-05-23T17:42:47.789-07:00[America/Denver]
  profiles: after_route
#启动工程，在浏览器上访问http://localhost:8080/api/v1/user/oa/liuyi27，会显示http://192.168.12.33:8083/api/v1/user/oa/liuyi27返回的结果，此时gateway路由到了配置的uri。如果我们将配置的时间设置到当前时之后，浏览器会显示404，此时证明没有路由到配置的uri.  
---
spring:
  cloud:
    gateway:
      routes:
      - id: header_route
        uri: http://192.168.12.33:8083
        predicates:
        - Header=X-Request-Id, \d+
  profiles: header_route
#当请求的Header中有X-Request-Id的header名，且header值为数字时，请求会被路由到配置的 uri. 使用curl执行以下命令:
#$ curl -H 'X-Request-Id:1' http://localhost:8080
#执行命令后，会正确的返回请求结果，结果省略。如果在请求中没有带上X-Request-Id的header名，并且值不为数字时，请求就会报404，路由没有被正确转发。

---
spring:
  cloud:
    gateway:
      routes:
      - id: method_route
        uri: http://192.168.12.33:8083
        predicates:
        - Method=GET
  profiles: method_route
#在上面的配置中，所有的GET类型的请求都会路由转发到配置的uri

---
spring:
  cloud:
    gateway:
      routes:
      - id: path_route
        uri: http://httpbin.org:80/get
        predicates:
        - Path=/foo/{segment}
  profiles: path_route
#在上面的配置中，所有的请求路径满足/foo/{segment}的请求将会匹配并被路由，比如/foo/1 、/foo/bar的请求，将会命中匹配，并成功转发。